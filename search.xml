<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>排序</title>
      <link href="/2022/12/26/%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/12/26/%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>比较相邻的元素。如果第一个比第二个大，就交换他们两个。对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。针对所有的元素重复以上的步骤，除了最后一个。持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public class Bubblesort &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] arr = new int[]&#123;12,5,4,52,4,6,32,45,61,2&#125;;</span><br><span class="line">        printArray(arr);</span><br><span class="line">        bubbleSort(arr);</span><br><span class="line">        printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void printArray(int[] arr)&#123;</span><br><span class="line">        <span class="keyword">for</span> (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    public static void swap(int[] arr,int i,int j)&#123;</span><br><span class="line">        int temp = arr[j];</span><br><span class="line">        arr[j] = arr[i];</span><br><span class="line">        arr[i] =temp;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void bubbleSort(int[] arr)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.length == 0 || arr.length &lt; 2)&#123;//处理边界条件</span><br><span class="line">            <span class="built_in">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        //0~n-1</span><br><span class="line">        //0~n-2</span><br><span class="line">        //0~end</span><br><span class="line">        <span class="keyword">for</span> (int end = arr.length-1; end &gt;=0; end--) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (int second = 1; second &lt;= end; second++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[second-1] &gt; arr[second])&#123;</span><br><span class="line">                    swap(arr,second-1,second);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public class SelectionSort &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int arr[] = &#123;2,9,46,5,6,1,4,85,6,3&#125;;</span><br><span class="line">        printarr(arr);</span><br><span class="line">        selectSort(arr);</span><br><span class="line">        printarr(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void printarr(int arr[])&#123;</span><br><span class="line">        <span class="keyword">for</span> (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    public static void selectSort(int arr[])&#123;</span><br><span class="line">        //0~n-1范围上选择一个最小值交换，1~n-1范围上选择一个最小值交换......</span><br><span class="line">        <span class="keyword">if</span>(arr.length == 0 || arr.length &lt; 2)&#123;//处理边界条件</span><br><span class="line">            <span class="built_in">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        int N = arr.length;</span><br><span class="line">        //0~n-1</span><br><span class="line">        //1~n-1</span><br><span class="line">        //2~n-1</span><br><span class="line">        <span class="keyword">for</span> (int i = 0; i &lt; N; i++) &#123;</span><br><span class="line">            //0~n-1</span><br><span class="line">            //1~n-1</span><br><span class="line">            //2~n-1</span><br><span class="line">            //i~n-1</span><br><span class="line">            int minValueIndex = i;//i</span><br><span class="line">            <span class="keyword">for</span> (int j = i + 1; j &lt; N; j++) &#123;</span><br><span class="line">                //从i+1开始判断这个位置上的数是不是比i位置上的数小，如果有这么一个数就把这个数赋给minValueIndex，否则不变。</span><br><span class="line">                minValueIndex = arr[j]&lt;arr[minValueIndex] ? j : minValueIndex;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(arr,i,minValueIndex);//把minValueIndex位置上值和i位置上的值交换</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void swap(int[] arr,int i,int j)&#123;</span><br><span class="line">        int tmp = arr[j];</span><br><span class="line">        arr[j] = arr[i];</span><br><span class="line">        arr[i] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>插入排序的工作方式像许多人排序一手扑克牌。开始时，我们的左手为空并且桌子上的牌面向下。然后，我们每次从桌子上拿走一张牌并将它插入左手中正确的位置。为了找到一张牌的正确位置，我们从右到左将它与已在手中的每张牌进行比较。拿在左手上的牌总是排序好的，原来这些牌是桌子上牌堆中顶部的牌。插入排序是指在待排序的元素中，假设前面n-1(其中n&gt;&#x3D;2)个数已经是排好顺序的，现将第n个数插到前面已经排好的序列中，然后找到合适自己的位置，使得插入第n个数的这个序列也是排好顺序的。按照此法对所有元素进行插入，直到整个序列排为有序的过程，称为插入排序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public class Insertsort &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] arr = new int[]&#123;12,5,4,52,4,6,32,45,61,2&#125;;</span><br><span class="line">        printArray(arr);</span><br><span class="line">        insertSort2(arr);</span><br><span class="line">        printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void printArray(int[] arr)&#123;</span><br><span class="line">        <span class="keyword">for</span> (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    public static void swap(int[] arr,int i,int j)&#123;</span><br><span class="line">        int temp = arr[j];</span><br><span class="line">        arr[j] = arr[i];</span><br><span class="line">        arr[i] =temp;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void insertSort1(int[] arr)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr == null || arr.length &lt; 2)&#123;//处理边界条件</span><br><span class="line">            <span class="built_in">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (int end = 1; end &lt; arr.length; end++) &#123;</span><br><span class="line">            int newNumIndex = end;</span><br><span class="line">            <span class="keyword">while</span> (newNumIndex - 1 &gt;= 0 &amp;&amp; arr[newNumIndex - 1] &gt; arr[newNumIndex])&#123;</span><br><span class="line">                swap(arr,newNumIndex - 1,newNumIndex);</span><br><span class="line">                newNumIndex--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public static void insertSort2(int[] arr)&#123;//优化</span><br><span class="line">        <span class="keyword">if</span>(arr == null || arr.length &lt; 2)&#123;//处理边界条件</span><br><span class="line">            <span class="built_in">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (int end = 1; end &lt; arr.length; end++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (int pre = end - 1;pre &gt;= 0 &amp;&amp; arr[pre] &gt; arr[pre + 1]; pre--)</span><br><span class="line">               swap(arr, pre, pre + 1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>位运算</title>
      <link href="/2022/12/26/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
      <url>/2022/12/26/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>程序中的所有数在计算机内存中都是以二进制的形式储存的。位运算就是直接对整数在内存中的二进制位进行操作。</p><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h3 id="常见位运算符"><a href="#常见位运算符" class="headerlink" title="常见位运算符"></a>常见位运算符</h3><p>1.&amp;运算符</p><p>与运算符，两位都为1时，结果为1，否则为0。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> 1111</span><br><span class="line">|1010</span><br><span class="line">------</span><br><span class="line"> 1111</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.|运算符</p><p>或运算符，两位都为0时，结果为0，否则为1。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> 1111</span><br><span class="line">|1010</span><br><span class="line">------</span><br><span class="line"> 1111</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3^运算符</p><p>异或运算符，两位相同时为1，不同为0。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> 1111</span><br><span class="line">^1010</span><br><span class="line">------</span><br><span class="line"> 0101</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.~运算符</p><p>取反运算符，按位取反。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0011 =&gt; 1100</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.&lt;&lt;左移运算符</p><p>向左进行移位操作，高位丢弃，低位补 0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int a = 8;</span><br><span class="line">a &lt;&lt; <span class="string">3;</span></span><br><span class="line"><span class="string">移位前：0000 0000 0000 0000 0000 0000 0000 1000</span></span><br><span class="line"><span class="string">移位后：0000 0000 0000 0000 0000 0000 0100 0000</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>6.&gt;&gt;右移运算符</p><p>向右进行移位操作，对无符号数，高位补 0，对于有符号数，高位补符号位。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int a = 8;</span><br><span class="line">a &gt;&gt; 3;</span><br><span class="line">移位前：0000 0000 0000 0000 0000 0000 0000 1000</span><br><span class="line">移位后：0000 0000 0000 0000 0000 0000 0000 0001</span><br><span class="line">​</span><br><span class="line">int a = -8;</span><br><span class="line">a &gt;&gt; 3;</span><br><span class="line">移位前：1111 1111 1111 1111 1111 1111 1111 1000</span><br><span class="line">移位前：1111 1111 1111 1111 1111 1111 1111 1111</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="常见位运算问题"><a href="#常见位运算问题" class="headerlink" title="常见位运算问题"></a>常见位运算问题</h3><p>1 位操作实现乘除法</p><p>数 a 向右移一位，相当于将 a 除以 2；数 a 向左移一位，相当于将 a 乘以 2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int a = 2;</span><br><span class="line">a &gt;&gt; 1; ---&gt; 1</span><br><span class="line">a &lt;&lt; <span class="string">1; ---&gt; 4</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>2 位操作交换两数</p><p> 位操作交换两数可以不需要第三个临时变量，虽然普通操作也可以做到，但是没有其效率高.<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int n = 8, m = 10;</span><br><span class="line">n ^= m;</span><br><span class="line">m ^= n; </span><br><span class="line">n ^= m;    </span><br><span class="line">System.out.println(n + <span class="string">&quot;, &quot;</span> + m);</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>3 判断一个数值的奇偶</p><p>只要根据最未位是0还是1来决定，为0就是偶数，为1就是奇数，所以只需要与 1 相与。因此可以用if ((a &amp; 1) &#x3D;&#x3D; 0)代替if (a % 2 &#x3D;&#x3D; 0)来判断a是不是偶数。<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int m = -14;</span><br><span class="line"><span class="keyword">if</span> ((m &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">    System.out.println(&quot;奇数&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    System.out.println(&quot;偶数&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>4 打印int型底层32位信息<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class Weiyunsuan &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int num = 4 ;</span><br><span class="line">        <span class="built_in">print</span>(num);</span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">        int a = Integer.MIN_VALUE;</span><br><span class="line">        <span class="built_in">print</span>(a);</span><br><span class="line">        <span class="built_in">print</span>(a&gt;&gt;3);//带符号右移</span><br><span class="line">        <span class="built_in">print</span>(a&gt;&gt;&gt;3);//不带符号右移</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public static void <span class="built_in">print</span>(int num)&#123;</span><br><span class="line">        <span class="keyword">for</span> (int i = 31; i &gt;=0 ; i--) &#123;</span><br><span class="line">            System.out.print((num &amp; (<span class="number">1</span>&lt;&lt;i)) == 0 ? <span class="string">&quot;0&quot;</span>:<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>请解释“&amp;”和“&amp;&amp;”的区别？<br>1、对于“&amp;&amp;”主要应用在逻辑运算中，表示短路与操作，在进行若干个条件判断的时候，如果有条件返回了false，那么后续的条件都不判断，最终的判断的结果就是false；<br>2、对于“&amp;”有两种使用环境：<br>A、逻辑运算：表示所有的判断条件都会执行，不管是否遇见有返回false的判断条件；<br>B、位运算：表示进行位与的计算，如果两位的内容都是1结果才是1，如果有一位是0，那么位与的结果就是0<br>请解释“|”和“||”的区别？<br>1、对于“||”主要在逻辑运算上使用，表示短路或操作，在进行多个条件判断的时候，如果存在有true，后续的条件不再判断，最终的结果就是true；<br>2、对于“|”有两种使用环境：<br>A、逻辑运算：表示所有的判断条件都会执行，不管是否遇见有返回true的判断条件；<br>B、位运算：表示进行位或的计算，如果两位有一位1结果就是1，两位全部为0，结果才为0。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/12/23/hello-world/"/>
      <url>/2022/12/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
